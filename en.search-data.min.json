[{"id":0,"href":"/keido/tags/BOOK/","title":"BOOK","parent":"Tags","content":""},{"id":1,"href":"/keido/tags/CONCEPT/","title":"CONCEPT","parent":"Tags","content":""},{"id":2,"href":"/keido/tags/DOC/","title":"DOC","parent":"Tags","content":""},{"id":3,"href":"/keido/","title":"Keido","parent":"","content":""},{"id":4,"href":"/keido/notes/","title":"Keido","parent":"Keido","content":"Wiki \u0026amp; Zettelkastenによる知的生産基盤.\n知識まとめ(Wiki)    知識をトピックごとにまとめます.\n 📂プログラミング  📂Emacs 📝Sphinx 📝Lisp  📝Common Lisp   📝adb   📂生産性  📝勉強法 📝Zettelkasten Method 📝GTD 📝Zotero   📝Z世代 📝Youtube  知恵まとめ(Zettelkasten)     🎓GTDのキモはマインドフルネス状態を目指してマインドワンダリングを制御すること 🎓Wikiの整理はソースコードのリファクタリングをするときの心構えでやる  勉強ノート     📁勉強記録  参照     🗒知的生産基盤の運用ルールまとめ 🖊Futurismo Wiki 立ち上げ(Dokuwiki) 🖊ScrapboxによるFuturismo Wiki復活 🖊Futurismo Wiki復活🎉(3回目) with Sphinx 🖊Futurismo Wikiを閉鎖して新たにデジタルガーデンを立ち上げます  "},{"id":5,"href":"/keido/tags/ONLINE/","title":"ONLINE","parent":"Tags","content":""},{"id":6,"href":"/keido/tags/SOURCE/","title":"SOURCE","parent":"Tags","content":""},{"id":7,"href":"/keido/tags/","title":"Tags","parent":"Keido","content":""},{"id":8,"href":"/keido/tags/TALK/","title":"TALK","parent":"Tags","content":""},{"id":9,"href":"/keido/tags/TOC/","title":"TOC","parent":"Tags","content":""},{"id":10,"href":"/keido/tags/WIKI/","title":"WIKI","parent":"Tags","content":""},{"id":11,"href":"/keido/notes/hekireki/","title":"⚡My Emacs Config - 霹靂一閃","parent":"Keido","content":"Emacsの呼吸壱ノ型, 霹靂一閃.\npackageの並び順は Doom Emacs の Molule Index (アルファベット順)に従う.\nref: https://github.com/tsu-nera/hekireki\n;;; $DOOMDIR/config.el -*- lexical-binding: t; -*- App    Twitter    ;; App ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;; twittering-mode ;; この設定がないと認証が失敗した. ;; twittering-oauth-get-access-token: Failed to retrieve a request token (add-hook! \u0026#39;twittering-mode-hook (setq twittering-allow-insecure-server-cert t)) eww    Emacsのテキストブラウザ(Manual)\nnotes:\n ewwを起動しただけだとminibufferなのでC-gで消えてしまうので大きくC-x 1とかで大きくする. C-u M-x ewwでひとつのbufferを使いまわすのではなく別のBufferでewwを開く. M-RETでURLを新しいBufferで開く. Doom EmacsだとC-c s o(online)でいろいろと検索できる(w/Chrome). helm-google-suggest的な.   (use-package! eww :bind (\u0026#34;C-c s w\u0026#34; . eww-search-words) (\u0026#34;C-c o w\u0026#34; . eww-open-in-new-buffer))  ace-linkをつかうとewwのlinkをインタラクティブに選択できて便利.   (use-package! ace-link :config (eval-after-load \u0026#39;eww \u0026#39;(define-key eww-mode-map \u0026#34;f\u0026#34; \u0026#39;ace-link-eww)) (ace-link-setup-default)) org-web-tools    ewwとorgを便利にするツール群(https://github.com/alphapapa/org-web-tools).\n(use-package! org-web-tools :bind (\u0026#34;C-c i l\u0026#34; . org-web-tools-insert-link-for-url)) Pocket    あとで読むサービス.\n(global-set-key (kbd \u0026#34;C-x w p\u0026#34;) \u0026#39;pocket-reader) (use-package! pocket-reader :bind (\u0026#34;C-x w l\u0026#34; . pocker-reader-add-link) :config (setq pocket-reader-open-url-default-function #\u0026#39;eww) (setq pocket-reader-pop-to-url-default-function #\u0026#39;eww)) RSS(Elfeed)    ;; elfeed (global-set-key (kbd \u0026#34;C-x w w\u0026#34;) \u0026#39;elfeed) (use-package! elfeed :config (setq elfeed-feeds \u0026#39;( (\u0026#34;https://yuchrszk.blogspot.com/feeds/posts/default\u0026#34; blog) ; パレオな男 (\u0026#34;https://www.youtube.com/feeds/videos.xml?channel_id=UCFo4kqllbcQ4nV83WCyraiw\u0026#34; youtube) ; 中田敦彦 (\u0026#34;https://www.youtube.com/feeds/videos.xml?channel_id=UCFdBehO71GQaIom4WfVeGSw\u0026#34; youtube) ;メンタリストDaiGo (\u0026#34;https://www.youtube.com/feeds/videos.xml?playlist_id=PL3N_SB4Wr_S2cGYuI02bdb4UN9XTZRNDu\u0026#34; youtube) ; 与沢の流儀 )) (setq-default elfeed-search-filter \u0026#34;@1-week-ago +unread \u0026#34;) (defun elfeed-search-format-date (date) (format-time-string \u0026#34;%Y-%m-%d %H:%M\u0026#34; (seconds-to-time date))) ) Checkers    ;; Checkers ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Completion    ;; Completion ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; (use-package! avy :bind (\u0026#34;M-g c\u0026#34; . avy-goto-char) ;; doom の keybind 上書き. (\u0026#34;M-g g\u0026#34; . avy-goto-line) ;; doom の keybind 上書き. (\u0026#34;M-g s\u0026#34;. avy-goto-word-1)) ;; うまく動かないので封印 doom との相性が悪いのかも. ;; ひとまず migemo したいときは isearch で対応. ;; (use-package! avy-migemo ;; :after migemo ;; :bind ;; (\u0026#34;M-g m m\u0026#34; . avy-migemo-mode) ;; (\u0026#34;M-g c\u0026#34; . avy-migemo-goto-char-timer) ;; doom の keybind 上書き. ;; :config ;; (avy-migemo-mode 1) ;; (setq avy-timeout-seconds nil)) (use-package! swiper :bind ; (\u0026#34;C-s\u0026#34; . swiper) ;; migemo とうまく連携しないので isearch 置き換えを保留. C-c s s で swiper 起動. :config (ivy-mode 1)) ;; avy-migemo-e.g.swiper だけバクる ;; https://github.com/abo-abo/swiper/issues/2249 ;;(after! avy-migemo ;; (require \u0026#39;avy-migemo-e.g.swiper)) ;; org-roam の completion-at-point が動作しないのはこいつかな... ;; (add-hook! \u0026#39;org-mode-hook (company-mode -1)) ;; company はなにげに使いそうだからな，TAB でのみ補完発動させるか. (setq company-idle-delay nil) (global-set-key (kbd \u0026#34;TAB\u0026#34;) #\u0026#39;company-indent-or-complete-common) all-the-icons-completion    https://github.com/iyefrat/all-the-icons-completion\n(use-package! all-the-icons-completion :init (all-the-icons-completion-mode)) (add-hook! marginalia-mode-hook #\u0026#39;all-the-icons-completion-marginalia-setup) Config    ;; Config ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;; memo: ;; use-package! は:defer, :hook, :commands, or :after が省略されると起動時に load される. ;; after! は package が load されたときに評価される. ;; add-hook! は mode 有効化のとき. setq-hook!は equivalent. ;; どれを使うかの正解はないがすべて use-package!だと起動が遅くなるので ;; 場合によってカスタマイズせよ，とのこと. ;; https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#configuring-packages ;; ;; doom specific config ;; (setq user-full-name \u0026#34;John Doe\u0026#34; ;; user-mail-address \u0026#34;john@doe.com\u0026#34;) (setq confirm-kill-emacs nil) ; 終了時の確認はしない. ;; フルスクリーンで Emacs 起動 ;; ブラウザと並べて表示することが多くなったのでいったんマスク ;; (add-to-list \u0026#39;initial-frame-alist \u0026#39;(fullscreen . maximized)) ;; This is to use pdf-tools instead of doc-viewer (use-package! pdf-tools :config (pdf-tools-install) ;; This means that pdfs are fitted to width by default when you open them (setq-default pdf-view-display-size \u0026#39;fit-width) :custom (pdf-annot-activate-created-annotations t \u0026#34;automatically annotate highlights\u0026#34;)) Editor    ;; Editor ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;; 英数字と日本語の間にスペースをいれる. (use-package! pangu-spacing :config (global-pangu-spacing-mode 1) ;; 保存時に自動的にスペースを入れるのを抑止.あくまで入力時にしておく. (setq pangu-spacing-real-insert-separtor nil)) ;; 記号の前後にスペースを入れる. (use-package! electric-operator) Emacs    ;; Emacs ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; (pixel-scroll-precision-mode) ace-window     3つ以上のwindowの選択が番号でできる. defaultでC-x oを上書きしてる? C-u C-x o だとwindowをswapできる(ace-swap-window).  Email    ;; Email ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Input    ;; Input ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; (set-language-environment \u0026#34;Japanese\u0026#34;) (prefer-coding-system \u0026#39;utf-8) (set-default \u0026#39;buffer-filecoding-system \u0026#39;utf-8) ;; migemo (use-package! migemo :config (setq migemo-command \u0026#34;cmigemo\u0026#34;) (setq migemo-options \u0026#39;(\u0026#34;-q\u0026#34; \u0026#34;--emacs\u0026#34; \u0026#34;-i\u0026#34; \u0026#34;\\a\u0026#34;)) (setq migemo-dictionary \u0026#34;/usr/share/migemo/utf-8/migemo-dict\u0026#34;) (setq migemo-user-dictionary nil) (setq migemo-regex-dictionary nil) (setq migemo-coding-system \u0026#39;utf-8-unix) (migemo-init)) fcitx    (use-package! fcitx :config (setq fcitx-remote-command \u0026#34;fcitx5-remote\u0026#34;) (fcitx-aggressive-setup) ;; Linux なら t が推奨されるものの、fcitx5 には未対応なためここは nil (setq fcitx-use-dbus nil)) Lang    OS    ;; OS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; (require \u0026#39;exwm-randr) (setq exwm-randr-workspace-output-plist \u0026#39;(0 \u0026#34;HDMI-1\u0026#34;)) (add-hook \u0026#39;exwm-randr-screen-change-hook (lambda () (start-process-shell-command \u0026#34;xrandr\u0026#34; nil \u0026#34;xrandr --output HDMI-1 --primary --right-of eDP-1 --auto\u0026#34;))) (exwm-randr-enable) (require \u0026#39;exwm-systemtray) (exwm-systemtray-enable) (require \u0026#39;exwm) (require \u0026#39;exwm-config) (exwm-config-default) Org mode    ;; Org mode ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;; https://github.com/hlissner/doom-emacs/blob/develop/modules/lang/org/README.org ;; https://github.com/tsu-nera/dotfiles/blob/master/.emacs.d/inits/50_org-mode.org ;; スマホとの共有のため, github を clone したものを Dropbox に置いて$HOME に symlink している. (after! org (setq org-directory \u0026#34;~/keido\u0026#34;) (setq org-default-notes-file \u0026#34;gtd/gtd_projects.org\u0026#34;) (setq org-return-follows-link t) ;; Enter でリンク先へジャンプ (setq org-use-speed-commands t) ;; bullet にカーソルがあると高速移動 (setq org-hide-emphasis-markers t) ;; * を消して表示. (setq org-footnote-section \u0026#34;Notes\u0026#34;) ;; defaultではFootnotesなので変える. (setq org-footnote-auto-adjust t) ;; M-RET の挙動の調整 ;; t だと subtree の最終行に heading を挿入, nil だと current point に挿入 ;; なお，C-RET だと subtree の最終行に挿入され, C-S-RET だと手前に挿入される. (setq org-insert-heading-respect-content nil) (setq org-startup-indented t) (setq org-indent-mode-turns-on-hiding-stars nil) (setq org-startup-folded \u0026#39;show2levels);; 見出しの階層指定 (setq org-startup-truncated nil) ;; 長い文は折り返す. ;; org-babel のソースをキレイに表示. (setq org-src-fontify-natively t) (setq org-fontify-whole-heading-line t) ;; electric-indent は org-mode で誤作動の可能性があることのこと ;; たまにいきなり org-mode の tree 構造が壊れるから，とりあえず設定しておく. ;; この設定の効果が以下の記事で gif である. ;; https://www.philnewton.net/blog/electric-indent-with-org-mode/ (add-hook! org-mode (electric-indent-local-mode -1)) ;; org-agenda (setq org-refile-targets \u0026#39;((org-agenda-files :maxlevel . 3))) (setq org-agenda-time-leading-zero t) ;; 時間表示が 1 桁の時, 0 をつける (setq calendar-holidays nil) ;; 祝日を利用しない. (setq org-log-done \u0026#39;time);; 変更時の終了時刻記録. ;; スケジュールやデッドラインアイテムは DONE になっていれば表示する (setq org-agenda-skip-deadline-if-done nil) (setq org-agenda-skip-scheduled-if-done nil) (setq org-agenda-include-inactive-timestamps t) ;; default で logbook を表示 (setq org-agenda-start-with-log-mode t) ;; ;; default で 時間を表示 ;; org-agenda speedup tips ;; https://orgmode.org/worg/agenda-optimization.html ;; 何でもかんでも agenda すると思いので厳選. (setq org-agenda-files \u0026#39;(\u0026#34;~/Dropbox/keido/notes/gtd/gtd_projects.org\u0026#34; \u0026#34;~/Dropbox/keido/notes/journals/journal.org\u0026#34; ;; projectsディレクトリにある.orgをみる. ;; その配下のorgファイルは対象にはならない. \u0026#34;~/Dropbox/keido/notes/gtd/projects\u0026#34;)) ;; 期間を限定 (setq org-agenda-span 7) ; Inhibit the dimming of blocked tasks: (setq org-agenda-dim-blocked-tasks nil) ;; Inhibit agenda files startup options: (setq org-agenda-inhibit-startup nil) ;; Disable tag inheritance in agenda: (setq org-agenda-use-tag-inheritance nil) ;; org-capture ;; https://orgmode.org/manual/Capture-templates.html (defun my/create-timestamped-org-file (path) (expand-file-name (format \u0026#34;%s.org\u0026#34; (format-time-string \u0026#34;%Y%m%d%H%M%S\u0026#34;)) path)) (defun my/create-date-org-file (path) (expand-file-name (format \u0026#34;%s.org\u0026#34; (format-time-string \u0026#34;%Y-%m-%d\u0026#34;)) path)) (defconst my/captured-notes-file \u0026#34;~/keido/inbox/inbox.org\u0026#34;) (setq org-capture-templates \u0026#39;((\u0026#34;i\u0026#34; \u0026#34;📥 Inbox\u0026#34; entry (file \u0026#34;~/keido/inbox/inbox.org\u0026#34;) \u0026#34;* %?\\nCaptured On: %U\\n\u0026#34; :klll-buffer t) (\u0026#34;I\u0026#34; \u0026#34;📥+🌐 Inbox+Browser\u0026#34; entry (file \u0026#34;~/keido/inbox/inbox.org\u0026#34;) \u0026#34;* %?\\nSource: [[%:link][%:description]]\\nCaptured On: %U\\n\u0026#34; :klll-buffer t) (\u0026#34;q\u0026#34; \u0026#34;📥+🌐 Inbox+Browser(quote)\u0026#34; entry (file \u0026#34;~/keido/inbox/inbox.org\u0026#34;) \u0026#34;* %?\\nSource: [[%:link][%:description]]\\nCaptured On: %U\\n%i\\n\u0026#34; :klll-buffer t) (\u0026#34;c\u0026#34; \u0026#34;☑ Planning\u0026#34; plain (file+headline (lambda () (my/create-date-org-file \u0026#34;~/keido/notes/journals/daily\u0026#34;)) \u0026#34;Planning\u0026#34;) \u0026#34;%?\u0026#34; :unnarrowed t :kill-buffer t) (\u0026#34;t\u0026#34; \u0026#34;🤔 Thought\u0026#34; entry (file+headline (lambda () (my/create-date-org-file \u0026#34;~/keido/notes/journals/daily\u0026#34;)) \u0026#34;Thoughts\u0026#34;) \u0026#34;* 🤔 %?\\n%T\u0026#34; :empty-lines 1 :unnarrowed t :kill-buffer t) (\u0026#34;T\u0026#34; \u0026#34;🤔+📃 Thought+Ref\u0026#34; entry (file+headline (lambda () (my/create-date-org-file \u0026#34;~/keido/notes/journals/daily\u0026#34;)) \u0026#34;Thoughts\u0026#34;) \u0026#34;* 🤔 %?\\n%T from %a\\n\u0026#34; :empty-lines 1 :unnarrowed t :kill-buffer t) (\u0026#34;l\u0026#34; \u0026#34;🤔+🌐 Thought+Browser\u0026#34; entry (file+headline (lambda () (my/create-date-org-file \u0026#34;~/keido/notes/journals/daily\u0026#34;)) \u0026#34;Thoughts\u0026#34;) \u0026#34;* 🤔 %?\\n%T from [[%:link][%:description]]\\n\u0026#34; :empty-lines 1 :unnarrowed t :kill-buffer t) (\u0026#34;p\u0026#34; \u0026#34;🍅 Pomodoro\u0026#34; entry (file+headline (lambda () (my/create-date-org-file \u0026#34;~/keido/notes/journals/daily\u0026#34;)) \u0026#34;Pomodoros\u0026#34;) \u0026#34;* 🍅 %?\\n%T\u0026#34; :empty-lines 1 :unnarrowed t :kill-buffer t) (\u0026#34;j\u0026#34; \u0026#34;🖊 Journal\u0026#34; plain (file (lambda () (my/create-date-org-file \u0026#34;~/keido/notes/journals/daily\u0026#34;))) \u0026#34;%?\u0026#34; :empty-lines 1 :unnarrowed t :kill-buffer t) (\u0026#34;J\u0026#34; \u0026#34;🖊+📃 Journal+Ref\u0026#34; plain (file (lambda () (my/create-date-org-file \u0026#34;~/keido/notes/journals/daily\u0026#34;))) \u0026#34;%?\\n%a\u0026#34; :empty-lines 1 :unnarrowed t :kill-buffer t) (\u0026#34;L\u0026#34; \u0026#34;🖊+🌐 Journal+Browser\u0026#34; plain (file (lambda () (my/create-date-org-file \u0026#34;~/keido/notes/journals/daily\u0026#34;))) \u0026#34;%?\\nSource: [[%:link][%:description]]\\nCaptured On: %U\\n\u0026#34; :empty-lines 1 :unnarrowed t :kill-buffer t) (\u0026#34;z\u0026#34; \u0026#34;🎓 Zettelkasten\u0026#34; plain (file (lambda () (my/create-timestamped-org-file \u0026#34;~/keido/notes/zk\u0026#34;))) \u0026#34;#+TITLE:🎓%?\\n\u0026#34;) (\u0026#34;w\u0026#34; \u0026#34;📝 Wiki\u0026#34; plain (file (lambda () (my/create-timestamped-org-file \u0026#34;~/keido/notes/wiki\u0026#34;))) \u0026#34;#+EXPORT_FILE_NAME: ~/repo/futurismo4/wiki/xxx.rst #+OPTIONS: toc:t num:nil todo:nil pri:nil ^:nil author:nil *:t prop:nil #+TITLE:📝%?\\n\u0026#34;) )) ;; org-babel ;; 評価でいちいち質問されないように. (setq org-confirm-babel-evaluate nil) ;; org-babel で 実行した言語を書く. デフォルトでは emacs-lisp だけ. (org-babel-do-load-languages \u0026#39;org-babel-load-languages \u0026#39;((lisp . t) (shell . t))) ) ;; org-mode で timestamp のみを挿入するカスタム関数(hh:mm) (after! org (defun my/insert-timestamp () \u0026#34;Insert time stamp.\u0026#34; (interactive) (insert (format-time-string \u0026#34;%H:%M\u0026#34;))) (map! :map org-mode-map \u0026#34;C-c C-.\u0026#34; #\u0026#39;my/insert-timestamp)) ;; +pretty(org-superstar-mode)関連 ;;; Titles and Sections ;; hide #+TITLE: ;; (setq org-hidden-keywords \u0026#39;(title)) ;; set basic title font ;; (set-face-attribute \u0026#39;org-level-8 nil :weight \u0026#39;bold :inherit \u0026#39;default) ;; Low levels are unimportant =\u0026gt; no scaling ;; (set-face-attribute \u0026#39;org-level-7 nil :inherit \u0026#39;org-level-8) ;; (set-face-attribute \u0026#39;org-level-6 nil :inherit \u0026#39;org-level-8) ;; (set-face-attribute \u0026#39;org-level-5 nil :inherit \u0026#39;org-level-8) ;; (set-face-attribute \u0026#39;org-level-4 nil :inherit \u0026#39;org-level-8) ;; Top ones get scaled the same as in LaTeX (\\large, \\Large, \\LARGE) ;; (set-face-attribute \u0026#39;org-level-3 nil :inherit \u0026#39;org-level-8 :height 1.2) ;\\large ;; (set-face-attribute \u0026#39;org-level-2 nil :inherit \u0026#39;org-level-8 :height 1.44) ;\\Large ;; (set-face-attribute \u0026#39;org-level-1 nil :inherit \u0026#39;org-level-8 :height 1.728) ;\\LARGE ;; Only use the first 4 styles and do not cycle. (setq org-cycle-level-faces nil) (setq org-n-level-faces 4) ;; Document Title, (\\huge) ;; (set-face-attribute \u0026#39;org-document-title nil ;; :height 2.074 ;; :foreground \u0026#39;unspecified ;; :inherit \u0026#39;org-level-8) ;; (with-eval-after-load \u0026#39;org-superstar ;; (set-face-attribute \u0026#39;org-superstar-item nil :height 1.2) ;; (set-face-attribute \u0026#39;org-superstar-header-bullet nil :height 1.2) ;; (set-face-attribute \u0026#39;org-superstar-leading nil :height 1.3)) ;; Set different bullets, with one getting a terminal fallback. (setq org-superstar-headline-bullets-list \u0026#39;(\u0026#34;■\u0026#34; \u0026#34;◆\u0026#34; \u0026#34;●\u0026#34; \u0026#34;▷\u0026#34;)) ;; (setq org-superstar-special-todo-items t) ;; Stop cycling bullets to emphasize hierarchy of headlines. (setq org-superstar-cycle-headline-bullets nil) ;; Hide away leading stars on terminal. ;; (setq org-superstar-leading-fallback ?\\s) (setq inhibit-compacting-font-caches t) ;; 読書のためのマーカー（仮） ;; あとでちゃんと検討と朝鮮しよう. ;; (setq org-emphasis-alist ;; \u0026#39;((\u0026#34;*\u0026#34; bold) ;; (\u0026#34;/\u0026#34; italic) ;; (\u0026#34;_\u0026#34; underline)) ;; (\u0026#34;=\u0026#34; (:background \u0026#34;red\u0026#34; :foreground \u0026#34;white\u0026#34;)) ;; 書き手の主張 ;; (\u0026#34;~\u0026#34; (:background \u0026#34;blue\u0026#34; :foreground \u0026#34;white\u0026#34;)) cddddd;; 根拠 ;; (\u0026#34;+\u0026#34; (:background \u0026#34;green\u0026#34; :foreground \u0026#34;black\u0026#34;)))) ;; 自分の考え org-toggl    org-modeをTogglと連携させる. https://github.com/mbork/org-toggl\n(use-package! org-toggl :after org :config (setq org-toggl-inherit-toggl-properties t) (toggl-get-projects) (org-toggl-integration-mode)) ox-hugo    Org-modeで書いたブログ記事をHugoにあったMarkdown形式に変換する.\nブログFuturismoはOrg-modeで執筆してこれを利用してMarkdownに変換している.\n(use-package! ox-hugo :after \u0026#39;ox) ox-rst    Org-modeで書いたWiki用のページをSphinxで公開するためにreST形式に変換する.\nリンク形式がうまく変換できないのでけっこう強引に変換している(もう少しうまく改善したい).\n(use-package! ox-rst :after \u0026#39;ox) (after! ox (defun my/rst-to-sphinx-link-format (text backend info) (when (and (org-export-derived-backend-p backend \u0026#39;rst) (not (search \u0026#34;\u0026lt;http\u0026#34; text))) (replace-regexp-in-string \u0026#34;\\\\(\\\\.org\u0026gt;`_\\\\)\u0026#34; \u0026#34;\u0026gt;`\u0026#34; (concat \u0026#34;:doc:\u0026#34; text) nil nil 1))) (add-to-list \u0026#39;org-export-filter-link-functions \u0026#39;my/rst-to-sphinx-link-format)) org-journal    https://github.com/bastibe/org-journal\n(use-package! org-journal :after org :bind (\u0026#34;C-c r d n\u0026#34; . org-journal-new-entry) (\u0026#34;C-c r d d\u0026#34; . org-journal-open-current-journal-file) :custom (org-journal-date-prefix \u0026#34;#+TITLE: ✍\u0026#34;) (org-journal-file-format \u0026#34;%Y-%m-%d.org\u0026#34;) (org-journal-dir (file-truename \u0026#34;~/keido/notes/journals/daily\u0026#34;)) (org-journal-date-format \u0026#34;%Y-%m-%d\u0026#34;) :config (setq org-journal-enable-agenda-integration t) (defun org-journal-file-header-func (time) \u0026#34;Custom function to create journal header.\u0026#34; (concat (pcase org-journal-file-type (`daily \u0026#34;#+STARTUP: showeverything\u0026#34;)))) ;; ;; (`weekly \u0026#34;#+TITLE: Weekly Journal\\n#+STARTUP: folded\u0026#34;) ;; ;;(`monthly \u0026#34;#+TITLE: Monthly Journal\\n#+STARTUP: folded\u0026#34;) ;; ;; (`yearly \u0026#34;#+TITLE: Yearly Journal\\n#+STARTUP: folded\u0026#34;)))) (setq org-journal-file-header \u0026#39;org-journal-file-header-func) ;; org-roamに対応させるためにorg-idを生成 (defun org-create-new-id-journal () (goto-char (point-min)) (org-id-get-create) (goto-char (point-max))) (add-hook \u0026#39;org-journal-after-header-create-hook \u0026#39;org-create-new-id-journal) ) Org-roam    Zettelkasten MethodのOrg-roam実装.\norg-roam-dialiesよりもorg-journalを利用する(org-agendaの都合).\n;; org-roam (setq org-roam-directory (file-truename \u0026#34;~/keido/notes\u0026#34;)) (setq org-roam-db-location (file-truename \u0026#34;~/keido/db/org-roam.db\u0026#34;)) (use-package! org-roam :after org :init (setq org-roam-v2-ack t) (map! :leader :prefix (\u0026#34;r\u0026#34; . \u0026#34;org-roam\u0026#34;) \u0026#34;f\u0026#34; #\u0026#39;org-roam-node-find \u0026#34;i\u0026#34; #\u0026#39;org-roam-node-insert \u0026#34;l\u0026#34; #\u0026#39;org-roam-buffer-toggle \u0026#34;t\u0026#34; #\u0026#39;org-roam-tag-add \u0026#34;T\u0026#34; #\u0026#39;org-roam-tag-remove \u0026#34;a\u0026#34; #\u0026#39;org-roam-alias-add \u0026#34;A\u0026#34; #\u0026#39;org-roam-alias-remove \u0026#34;r\u0026#34; #\u0026#39;org-roam-ref-add \u0026#34;R\u0026#34; #\u0026#39;org-roam-ref-remove \u0026#34;o\u0026#34; #\u0026#39;org-id-get-create \u0026#34;u\u0026#34; #\u0026#39;my/org-roam-update ) :custom ;; ファイル名を ID にする. (org-roam-capture-templates \u0026#39;((\u0026#34;d\u0026#34; \u0026#34;default\u0026#34; plain \u0026#34;%?\u0026#34; :target (file+head \u0026#34;%\u0026lt;%Y%m%d%H%M%S\u0026gt;.org\u0026#34; \u0026#34;#+title: ${title}\\n\u0026#34;) :unnarrowed t) (\u0026#34;z\u0026#34; \u0026#34;🎓 Zettelkasten\u0026#34; plain \u0026#34;%?\u0026#34; :target (file+head \u0026#34;zk/%\u0026lt;%Y%m%d%H%M%S\u0026gt;.org\u0026#34; \u0026#34;#+title:🎓${title}\\n\u0026#34;) :unnarrowed t) (\u0026#34;w\u0026#34; \u0026#34;📝 Wiki\u0026#34; plain \u0026#34;%?\u0026#34; :target (file+head \u0026#34;zk/%\u0026lt;%Y%m%d%H%M%S\u0026gt;.org\u0026#34; \u0026#34;#+title:📝${title}\\n\u0026#34;) :unnarrowed t) (\u0026#34;f\u0026#34; \u0026#34;🦊 Darkfox\u0026#34; plain \u0026#34;%?\u0026#34; :target (file+head \u0026#34;darkfox/%\u0026lt;%Y%m%d%H%M%S\u0026gt;.org\u0026#34; \u0026#34;#+title:🦊${title}\\n\u0026#34;) :unnarrowed t) (\u0026#34;b\u0026#34; \u0026#34;📚 Book\u0026#34; plain \u0026#34;%? - title: %^{title} - authors: %^{author} - date: %^{date} - publisher: %^{publisher} - url: http://www.amazon.co.jp/dp/%^{isbn} \u0026#34; :target (file+head \u0026#34;zk/%\u0026lt;%Y%m%d%H%M%S\u0026gt;.org\u0026#34; \u0026#34;#+title:📚${title} - ${author}(${date})\\n\u0026#34;) :unnarrowed t) (\u0026#34;t\u0026#34; \u0026#34;🎤 Talk\u0026#34; plain \u0026#34;%? - title: %^{title} - editor: %^{editor} - date: %^{date} - url: %^{url} \u0026#34; :target (file+head \u0026#34;zk/%\u0026lt;%Y%m%d%H%M%S\u0026gt;.org\u0026#34; \u0026#34;#+title:🎤${title} - ${editor}(${date})\\n\u0026#34;) :unnarrowed t) (\u0026#34;o\u0026#34; \u0026#34;💻 Online\u0026#34; plain \u0026#34;%? - title: %^{title} - authors: %^{author} - url: %^{url} \u0026#34; :target (file+head \u0026#34;zk/%\u0026lt;%Y%m%d%H%M%S\u0026gt;.org\u0026#34; \u0026#34;#+title:💻${title}\\n\u0026#34;) :unnarrowed t))) (org-roam-extract-new-file-path \u0026#34;%\u0026lt;%Y%m%d%H%M%S\u0026gt;.org\u0026#34;) ;; :map org-mode-map ;; (\u0026#34;C-M-i\u0026#34; . completion-at-point) :config (defun my/org-roam-update () (interactive) (org-roam-update-org-id-locations) (org-roam-db-sync)) (setq +org-roam-open-buffer-on-find-file nil) (org-roam-db-autosync-mode)) (use-package! websocket :after org-roam) (use-package! org-roam-ui :after org-roam ;; or :after org ;; normally we\u0026#39;d recommend hooking orui after org-roam, but since org-roam does not have ;; a hookable mode anymore, you\u0026#39;re advised to pick something yourself ;; if you don\u0026#39;t care about startup time, use ;; :hook (after-init . org-roam-ui-mode) :config (setq org-roam-ui-sync-theme t org-roam-ui-follow t org-roam-ui-update-on-save t org-roam-ui-open-on-start t)) (use-package! org-roam-timestamps :after org-roam :config (org-roam-timestamps-mode) (setq org-roam-timestamps-remember-timestamps nil) (setq org-roam-timestamps-remember-timestamps nil)) ;; 今どきのアウトライナー的な線を出す. ;; Terminal Mode ではつかえないので一旦無効化する. ;; (require \u0026#39;org-bars) ;; (add-hook! \u0026#39;org-mode-hook #\u0026#39;org-bars-mode) ;; 空白が保存時に削除されると bullet 表示がおかしくなる. ;; なお wl-bulter は doom emacs のデフォルトで組み込まれている. (add-hook! \u0026#39;org-mode-hook (ws-butler-mode -1)) Org-roam管理下のノートの全文検索    deft より高速(https://org-roam.discourse.group/t/using-consult-ripgrep-with-org-roam-for-searching-notes).\n(defun my/org-roam-rg-search () \u0026#34;Search org-roam directory using consult-ripgrep. With live-preview.\u0026#34; (interactive) (counsel-rg nil org-roam-directory)) (global-set-key (kbd \u0026#34;C-c r s\u0026#34;) \u0026#39;my/org-roam-rg-search) org-publish(Org-roamのノートをサイトへ公開)    (setq org-publish-project-alist (list (list \u0026#34;keido\u0026#34; :recursive t :base-directory (file-truename \u0026#34;~/keido/notes/wiki\u0026#34;) :publishing-directory \u0026#34;~/repo/keido-hugo/content/notes\u0026#34; :publishing-function \u0026#39;org-hugo-export-wim-to-md))) bibtex関連(Org-ref)    文献管理. Zoteroと連携して，論文というよりは書籍やYoutube動画やWeb記事のメモに利用.\n org-ref ivy-bibtex  ivyのactionは ivy-bibtexでC-SPCで選択-\u0026gt; C-M-oでaction選択候補を出し，pとかeとか押す.   org-roam-bibtex   (use-package! org-ref :config (setq bibtex-completion-bibliography (list (file-truename \u0026#34;~/keido/references/zotLib.bib\u0026#34;))) (setq bibtex-completion-additional-search-fields \u0026#39;(keywords)) (setq bibtex-completion-display-formats \u0026#39;((online . \u0026#34;${=has-pdf=:1}${=has-note=:1} ${=type=:6} ${year:4} ${author:24} ${title:*}\u0026#34;) (book . \u0026#34;${=has-pdf=:1}${=has-note=:1} ${=type=:6} ${year:4} ${author:24} ${title:*}\u0026#34;) (video . \u0026#34;${=has-pdf=:1}${=has-note=:1} ${=type=:6} ${year:4} ${editor:24} ${title:*}\u0026#34;) (paper . \u0026#34;${=has-pdf=:1}${=has-note=:1} ${=type=:6} ${year:4} ${author:24} ${title:*}\u0026#34;) (t . \u0026#34;${=has-pdf=:1}${=has-note=:1} ${=type=:6} ${year:4} ${author:24} ${title:*}\u0026#34;))) (setq bibtex-completion-pdf-symbol \u0026#34;📓\u0026#34;) (setq bibtex-completion-notes-symbol \u0026#34;📝\u0026#34;) (setq bibtex-completion-pdf-field \u0026#34;file\u0026#34;) ;; (setq bibtex-completion-pdf-open-function ;;\t(lambda (fpath) ;;\t(call-process \u0026#34;open\u0026#34; nil 0 nil fpath))) ;; Create fields for Film type (add-to-list \u0026#39;bibtex-biblatex-field-alist \u0026#39;((\u0026#34;video\u0026#34; \u0026#34;Video or Audio(like YouTube)\u0026#34;))) (add-to-list \u0026#39;bibtex-biblatex-entry-alist \u0026#39;(\u0026#34;video\u0026#34; \u0026#34;A Video\u0026#34; (\u0026#34;video\u0026#34;, \u0026#34;title\u0026#34; \u0026#34;editor\u0026#34; \u0026#34;date\u0026#34; \u0026#34;url\u0026#34; \u0026#34;urldate\u0026#34; \u0026#34;abstract\u0026#34; \u0026#34;editortype\u0026#34;) nil \u0026#34;keywords\u0026#34;)) (bibtex-set-dialect \u0026#39;biblatex)) (use-package! ivy-bibtex :after org-ref :init (map! :leader :prefix (\u0026#34;b\u0026#34; . \u0026#34;org-ref\u0026#34;) \u0026#34;b\u0026#34; #\u0026#39;org-ref-bibtex-hydra/body \u0026#34;v\u0026#34; #\u0026#39;ivy-bibtex \u0026#34;c\u0026#34; #\u0026#39;org-ref-insert-cite-link \u0026#34;a\u0026#34; #\u0026#39;orb-note-actions \u0026#34;i\u0026#34; #\u0026#39;orb-insert-link) :config (setq ivy-re-builders-alist \u0026#39;((ivy-bibtex . ivy--regex-ignore-order) (t . ivy--regex-plus))) (setq ivy-bibtex-default-action #\u0026#39;ivy-bibtex-open-url-or-doi) (ivy-set-actions \u0026#39;ivy-bibtex \u0026#39;((\u0026#34;p\u0026#34; ivy-bibtex-open-any \u0026#34;Open PDF, URL, or DOI\u0026#34; ivy-bibtex-open-any) (\u0026#34;e\u0026#34; ivy-bibtex-edit-notes \u0026#34;Edit notes\u0026#34; ivy-bibtex-edit-notes))) ) (use-package! org-roam-protocol :after org-protocol) (use-package! org-roam-bibtex :after org-roam ivy-bibtex :hook (org-mode . org-roam-bibtex-mode) :custom (orb-insert-interface \u0026#39;ivy-bibtex) :config (setq orb-preformat-keywords \u0026#39;(\u0026#34;author\u0026#34; \u0026#34;date\u0026#34; \u0026#34;url\u0026#34; \u0026#34;title\u0026#34; \u0026#34;isbn\u0026#34; \u0026#34;publisher\u0026#34; \u0026#34;urldate\u0026#34; \u0026#34;editor\u0026#34; \u0026#34;file\u0026#34;)) (setq orb-process-file-keyword t) (setq orb-attached-file-extensions \u0026#39;(\u0026#34;pdf\u0026#34;))) Org-noter    PDFの注釈を管理する. :link:weirdNox/org-noter\nはじめの起動がどうやればいいのかワカラなかった. 特定のファイルに記録を残したい場合はPDFのBufferではなく, 適当なheading作成してM-x org-noterを起動するとPDFを選択できる.\nM-x org-noter-create-skeltonという関数がヤばい. 🔗Youtube動画(1:08) PDFからOutlineを抜き出してOrg fileに生成して，あとはそのOrg-fileのBulletのカーソルを移動するとPDFのほうもシンクロして移動できる.\n凄すぎて笑った😂\n(use-package! org-noter :after (:any org pdf-view) :config (setq ;; I want to see the whole file org-noter-hide-other nil ;; Everything is relative to the main notes file org-noter-notes-search-path (list (file-truename \u0026#34;~/keido/notes/wiki\u0026#34;)) )) Term    ;; Term ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Tools    ;; Tools ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; UI    Doom    ;; UI ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;; どうもフォントが奇数だと org-table の表示が崩れる. ;; Source Han Code JP だとそもそも org-table の表示が崩れる. ;; terminal だと大丈夫な模様.そもそも Terminal はこの設定ではなくて Terminal Emulator の設定がきく. ;; (setq doom-font (font-spec :family \u0026#34;Source Han Code JP\u0026#34; :size 12 )) (setq doom-font (font-spec :family \u0026#34;Ricty Diminished\u0026#34; :size 15)) ;; doom-molokaiやdoom-monokai-classicだとewwの表示がいまいち. (setq doom-theme \u0026#39;doom-monokai-pro) (doom-themes-org-config) ;; counselとdoom-modelineが相性悪いようなのでworkspace name表示のためには追加で設定. ;; https://github.com/hlissner/doom-emacs/issues/314 (after! doom-modeline (setq doom-modeline-persp-name t)) emojify    Emacsで絵文字をつかう.\nどうもemojifyの絵文字辞書は，emojione-v2.2.6-22というものでやや古い. Twitterが好きなのでTwitterのオープンソース辞書のtwemojiに変更.\nhttps://github.com/iqbalansari/emacs-emojify/blob/master/data/emoji-sets.json\n(after! emojify (setq emojify-emoji-set \u0026#34;twemoji-v2-22\u0026#34;)) ただ，2022現在twemojiはv13なのでv2は古いな..というかでないやつもおおい.\nEmacsの機能でemoji-searchがあるのでこれも設定しておこう. こっちの辞書のほうが扱える文字か多い.\n;; doomだと C-c i eでemojify-insert-emoji (global-set-key (kbd \u0026#34;C-c i E\u0026#34;) \u0026#39;emoji-search) perfect-margin    いい感じにmarginをとってくれる (https://github.com/mpwang/perfect-margin)\n(use-package! perfect-margin :config (perfect-margin-mode 1)) Others    (setq display-line-numbers-type t) ; 行番号表示 ;; less でのファイル閲覧に操作性を似せる mode. ;; view-mode は emacs 内蔵. C-x C-r で read-only-mode でファイルオープン ;; doom emacs だと C-c t r で read-only-mode が起動する. (add-hook! view-mode (setq view-read-only t) (define-key ctl-x-map \u0026#34;\\C-q\u0026#34; \u0026#39;view-mode) ;; assinged C-x C-q. ;; less っぼく. (define-key view-mode-map (kbd \u0026#34;p\u0026#34;) \u0026#39;view-scroll-line-backward) (define-key view-mode-map (kbd \u0026#34;n\u0026#34;) \u0026#39;view-scroll-line-forward) ;; default の e でもいいけど，mule 時代に v に bind されてたので, emacs でも v に bind しておく. (define-key view-mode-map (kbd \u0026#34;v\u0026#34;) \u0026#39;read-only-mode)) "},{"id":12,"href":"/keido/notes/20220102144508/","title":"🎓GTDのキモはマインドフルネス状態を目指してマインドワンダリングを制御すること","parent":"Keido","content":"ストレスフリーとはすなわちマインドフルな状態であり，気になることというのはマインドワンダリングである. そうすると，GTDのキモとはマインドフルネスである.\nGTDの文脈でマインドフルネスを直接言及することはデビッド・アレンさんはしていないが，とても共通点が多い. 文脈ではストレス管理という言葉はよく現れる. GTDはもともとMind Like Waterに強く影響を受けている. これはマインドフルネス状態にとても近い.もう一つ言えば，マインドフルネスというのもサマタ瞑想の状態とヴィパッサナー瞑想の状態があるが，この状態はヴィパッサナーに近い.\nすべてを把握していることで思考にとらわれることがなく，その場で対処せずにInboxに入れて週次レビューを計画することで受け流すことにより，心の平穏を保つ.\nただ，マインドフルネスと少し違うところは，マインドフルネスは受け入れて手放すことが重要視されているが，GTD はすべての気になることをかき集めてそれを判断保留するか明らかにするという点である. 手放すという観点がGTDにはなく，保留にしてはいるものの，明らかにしてすべてを把握するという意気込みがある.\n"},{"id":13,"href":"/keido/notes/20220112100409/","title":"🎓Wikiの整理はソースコードのリファクタリングをするときの心構えでやる","parent":"Keido","content":"良い着眼点，深堀する.\n"},{"id":14,"href":"/keido/notes/20220104155431/","title":"🎤【Z世代】世界を激変させるニュージェネレーション！Z世代の価値観を徹底解説 - 中田敦彦(2021-12-11)","parent":"Keido","content":" title: 【Z世代①】世界を激変させるニュージェネレーション！Z世代の価値観を徹底解説 editor: 中田敦彦のYOUTUBE大学 date: 2021-12-11 url  https://www.youtube.com/watch?v=uIYR83OF7A4 https://www.youtube.com/watch?v=wnoj2XpLwIY   book: Z世代マーケティング 世界を激変させるニューノーマル | ジェイソン・ドーシー アンド デニス・ヴィラ tags: 📝Z世代  highlights    t.1:10 本はアメリカのZ世代について書いてある.    Z世代は世界的なワードなのか.\nX世代, Y世代もある.     X世代: 1965-1976 Y世代: 1997-1995 Z世代: 1996-2012  Z世代は購買力がある     Z世代はもう２５歳になっている.  ! ということはこれからお金を稼ぐにはこの世代をターゲットにする必要がありそうだな.   日本はすくない.  Z世代の特徴     スマホ一択  Eメール知らない. 他をさわったことがない. パソコンですらつかわない   プラットフォーム使い分け  テレビなんてつかわない. Googleではなくて，AmazonやYoutubeに時価でいく.  ! 勉強カフェで井口さんも，基本的にもはもうLINEとInstagramといっていた. ! Instagramという点にとても驚いた.     パーソナライゼーション  ? ようは広告にズブズブに洗脳されている世代ってことでは? ! ある意味すごく危険    キャッシュレスシームレス  お金なんてそもそも古いし，嫌がる.   社会正義  社会に対する価値観を明確に表明した企業にひかれる.  NIKE  X世代とY世代で炎上し，Z世代に強烈に突き刺さった.   エアリー（ブラジャーの会社） ! 実際にマーケティング戦略として成功しているのはすごい.   ! 売上No.1は響かない, なるほど. 個性に響くものが響く.  ? その個性すら広告で洗脳せれて出来上がったものでは     品質・価格に厳しい  安いものは買わない   スマホファーストUI  もう電車や駅の広告なんてみてない.    自動車: シェアビジネス     SNSインフルエンサー を信じる  TikTok, YouTube, Instagram   ! なんかZ世代はIT業界にいると普通のことだな.まあ，Z世代の人たちが使うものを作っている側なので.  ! 次はEmacsですべてを管理するので，E世代かな?    ! ようは，これからアフィリエイトをしようとしたときに，Z世代にターゲットをしぼるのがよい策ということが.  "},{"id":15,"href":"/keido/notes/20220103135419/","title":"🎤【ショート動画時代】YouTubeShorts vs TikTok vs Reels…メディアの次の覇権を担うのは一体どれだ？ - 中田敦彦(2022-01-01)","parent":"Keido","content":" title: 【ショート動画時代】YouTubeShorts vs TikTok vs Reels…メディアの次の覇権を担うのは一体どれだ？ editor: 中田敦彦のYouTube大学 date: 2022-01-01,2022-01-02 url  https://www.youtube.com/watch?v=M0NN3VPmqcg https://www.youtube.com/watch?v=xM1Rsi8fAMk   tags: 📝Z世代  highlights     ショート動画のブームが来ている. Tiktokの月間平均視聴時間がYouTubeを超えた. このブームに着目して各SNSのテック企業も続々と参入している.  YouTube(Google) -\u0026gt; YouTubeShort Instagram(Facebook) -\u0026gt; Instagram Reels(リールズと読む) まさにショート動画の戦国時代に突入している!!   ショート動画が人気な理由.  Z世代はスマホしかもっていない.  スマホは縦型動画が見やすい. みたくない動画は指で弾いて拒否できるIF.   Tiktokはリコメンドによって次の動画が自動的に流れる仕組みがあるから. YouTubeは基本的に検索で次の動画を選択する. バズればアルゴリズムによって一気にたくさんのユーザに自動的にレコメンドする仕組み.  既存の仕組みにはない恐ろしい拡散力.     ショート動画は広告が流せない.  なぜならコンテンツそのものが短いので.   ショート動画そのもので収益化するのではなくこれをCMとして利用する.  つまりメインの収益コンテンツへの誘導として利用する.   これからはショート動画からメインコンテンツへ誘導して収益を上げる流れが確実にくる.  すると，ショート動画を攻略することが次の時代の覇者となるだろう.    notes     Tiktokは優れたレコメンドエンジンの開発に全力を注いだという過去があるということをどこかできいた. CMの役割を担うとということは，当然企業も積極的に進出してくるだろうが，タレントを起用してもその人がショート動画に適用できるかわからないので，TikTockerに企業がアプローチして宣伝してもらうのだろうか?  "},{"id":16,"href":"/keido/notes/20220105160323/","title":"🏷List of Coursera Lectures","parent":"Keido","content":" 💻Learning How to Learn - Barbara Oakley(coursera)  "},{"id":17,"href":"/keido/notes/20220110033325/","title":"💻A Road to Common Lisp - Steve Losh(2018)","parent":"Keido","content":" title: A Road to Common Lisp authors: Steve Losh url: https://stevelosh.com/blog/2018/08/a-road-to-common-lisp/ refs  原文: A Road to Common Lisp / Steve Losh 日本語訳: A Road to Common Lisp 翻訳 · GitHub  \u0026ldquo;A Road to Common Lisp\u0026rdquo; を翻訳してみた - y2q_actionman’s ゴミクズチラ裏      Common Lispを学ぶための一つのロードマップ. 参考になるドキュメント.\n"},{"id":18,"href":"/keido/notes/20211231160618/","title":"💻GTDを噛み砕く - 吉良野すた(2020)","parent":"Keido","content":" authors: 吉良野すた url: https://stakiran.github.io/gtd%5Fkamikudaku/ date: 2020 tags  📝GTD    highlights    GTD とは秘書である    GTDストレスフリーとは，すっきり，はっきり，ゆっくり     すっきり: 頭のすべてを吐き出す はっきり: 次の行動を指し示す ゆっくり: 割り込みを制御  "},{"id":19,"href":"/keido/notes/20220104010102/","title":"💻How I note - AlexeyShmalko(2020)","parent":"Keido","content":" title: How I note authors: Alexey, Shmalko url: https://www.alexeyshmalko.com/how-i-note/ tags  📝Org-roam 📝Zettelkasten Method    highlights    私はよく本や論文やトークをインプットする.Web記事は形骸なので読まない.     I mostly read books, research papers, and I watch talks. I read less and less articles online—I find most to be too shallow (compared to books), too narrow (dealing with specific technical issues rather than long-living ideas), and not worth taking notes on. (Though there are great ones!)\n 読みながら手でモレスキンノートを取るよ.本に線は引かないけど.     While reading, I take notes on paper (small Moleskine notebook). I don’t highlight.\n モレスキンからの文献メモもOrgzlyからの走り書きのメモも，ウェブキャプチャした記事も全部Inboxにいれる.     Once a day I process my inbox: literature notes from notebook, fleeting notes, tasks, and articles from org file.\n 記事は(book/article/paper/talk)に分類している. org-ref, ivy-bibtex, org-roam-bibtexを使ってorg-fileで管理している.     I maintain a file per resource (book/article/paper/talk).\n  I manage my bibliography with org-ref, ivy-bibtex, and org-roam-bibtex.\n https://www.alexeyshmalko.com/biblio/\nPermanent Noteは再利用可能な形で記述するのがミソ.かんたんに他の文脈に埋め込めるので.     a note describes one idea only. This makes notes reusable—focused ideas are easy to apply in different context.\n Structure notesは Table of Contents(TOC)で，いわゆるMap of Contents(MOC)だ. Topicごとにノートをまとめることが目的.     Structure notes are kind of a table of contents for Zettelkasten (some call them Map of Contents notes)—they help me group notes on a topic.\n Structure Notesには，$をprefixでつけている.グループが小さければ相互リンクさせればいい.ただグループか大きくなってきたら$をprefixとするトピックを作成すればいい.臨機応変に.     When the number of notes in a group is small, you don’t need structure notes—you can just cross-link all relevant notes. But when the number of notes grows, it stops being practical—it is useful to have an overview note.\n  My structure notes usually start with the § prefix.\n Tag Noteというのを作成した.これは\u0026quot;List of xxxx\u0026quot;というタイトルで, #xxxというエイリアスで表現する.このTag Noteに$ではじまるTopicをリンクさせることで，バックリンクをスッキリまとめることができた.     I created “List of something” pages and aliased them to “#something.” Then I could tag programming languages with #programming-language and ideas about programming languages with § Programming Language.This helps to keep the list of backlinks clean.\n Roam Researchの慣習でPlaceholder notesというものがある.これは単語をタイトルにして中身が空白なノートでバックリンクを集めることが目的のモノ.しかしわたしはこれをつかわない.こんなものは役に立たないし，リンクが必要なら直接はれ(とまでは言ってない).     I don’t do that. I find placeholders quite useless. I rarely filled them, and most of them just kept living with a single link. So I deleted all placeholders I had.\n Roam Resarchの別の慣習のように単語を全部リンクするようなWikiの使い方はしない.思慮深くリンクを結ぶんだ.programmingという単語があったからってやたらめったらprogrammingという単語でリンクしまくらない.これを題してMindful Linkingという.     Another practice common in Roam Research is linking every word that you happen to have a note on.\n  I try to be more deliberate with linking\n ノートの種類は絵文字をプレフィックスにつけてディレクトリごと区別してるよ.     /: permanent “knowledge” notes (📝) /biblio: bibliographic (literature) notes (📖) /posts: posts intended for others (🖋) /life: random notes about myself and my small side projects. Not published /life/journal: a place for journaling and my daily notes /: work-related notes. To be deleted when I quit the job. Not published\n Literature NoteとPermanent Noteは区別する，混ぜたら危険.なぜならLiterature NoteはわたしのIdeaでない.    projectごとにディレクトリをわければまとめてアーカイブできる.そしてlifelongなわたしのメモはLifeにランダムに突っ込んでるよ.     In general, it makes sense to create a slip box for every project you have (test: are these notes useful after the project is done?). Job is an example of such a project, and I treat my life as an ultimate project.\n Spaced Repetitionで記憶を養うためにメモに対する質問をorg-fcをつかって作成している.もちろんノート公開のときは削ぎ落としてるけど. 定義系(terminology)とhowto系の質問が多いかな.     In general, it makes sense to create a slip box for every project you have (test: are these notes useful after the project is done?). Job is an example of such a project, and I treat my life as an ultimate project.\n わたしは過去のブログも全部Slipboxにぶち込んだ.大変だったが満足している.なぜならかつては3つもサイトがあったんだよ！めんどくさすぎる.動物園かよ!    link: https://www.alexeyshmalko.com/merging-my-websites/\n It’s taxing to maintain a zoo of websites using different technologies, and it is even harder to build an audience for each separately (especially given they are just side projects).\n 過去の記事はすべてリダイレクトしているから問題ない.数年後に削除する.    All of the websites now redirect to this one I’ve managed to merge all paths, so all existing links redirect to the same posts on this website. I’ll shut down other websites in a year or two.\nファイル名はすべてタイムスタンプにしている.なぜならタイトルはしょっちゅう変更するから.そしてそれをそのままURLの記事IDにもつかっている.     Now I use timestamp-based filenames (e.g., 20210613055225.org), and that’s what you can see in URLs.\n "},{"id":20,"href":"/keido/notes/20220105062820/","title":"💻Learning How to Learn - Barbara Oakley(coursera)","parent":"Keido","content":" title: Learning How to Learn: Powerful mental tools to help you master tough subjects authors: Barbara Oakley, Terrence Sejnowski url: https://www.coursera.org/learn/learning-how-to-learn tags  🏷Coursera 📝勉強法    Keywords     ポモドーロテクニック チャンク マジックナンバー4 間隔学習  Teachers    Barbara Oakley    Terrence Sejnowski     テレンス・J・セイノフスキー. 脳科学とニューラルネットワークのパイオニア. ディープラーニング革命という書籍を書いている.  Notes: week1    highlights: week1    Focused vs Diffuse Thinking     Focused Modeは既知の情報で活性化する. 問題解決. Diffuse Modeは未知の情報で活性化する. 記憶と想像力.  Procrastination, Memory, and Sleep     procrastination  先延ばしのこと.   ポモドーロテクニック.  25分と5分の集中と休憩を繰り返す. ここでのポイントは，5分の休憩でちょっとした報酬を用意すること 1. これによってやりたくないという気持ちを乗り越えることができる.   脳の記憶領域はWorking MemoryとLong term Memoryに分かれる.  Working Memoery  黒板のようなもの，一時領域. 前頭葉のあたりにある. 4つのスロットがある.   Long Term Memory  長期に保存される. 脳全体にある.     チャンク  記憶は情報を塊にしておくと記憶しやすい. とくに４つの情報をまとめておくと長期記憶に残りやすい.   Spaced Repetition(間隔学習)  情報はなんども間をあけて触れると記憶に残りやすい.   睡眠には記憶において2つの役割がある.  一つは脳から代謝における 毒素 を排除する.  このことによって頭の働きがよくなる. 実際に睡眠を取ると脳は縮む!! 毒素を排除するは運動もよい.   一つは学習や問題解決を助ける.  睡眠中に脳は情報を整理したり新しい問題解決方法を探す. 脳全体のニューロンが活性化して情報交換をしあう(difuss mode) 夢はその結果現れる.   Terrence Sejnowskiのインタビュー.      ポモドーロテクニックは知っていたけれども休憩に小さな報酬というのは新しい発想.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "},{"id":21,"href":"/keido/notes/20220104045818/","title":"💻講義の動画を倍速で視聴しても内容はちゃんと頭に入るのか？問題 - パレオな男(2022)","parent":"Keido","content":" title: 講義の動画を倍速で視聴しても内容はちゃんと頭に入るのか？問題 authors: 鈴木, 佑. url: https://yuchrszk.blogspot.com/2022/01/blog-post%5F04.html summary: 2倍速くらいならノーマル速度と変わらない or 学習効率はよい. ただし2倍以上だと落ちるので速すぎると悪い.  notes     これはすごい.  1.5倍速,2倍速とノーマル速度では2倍速のほうが学習効率が高かった.    External Links     🔗Learning in double time: The effect of lecture video speed on immediate and delayed comprehension - Murphy - - Applied Cognitive Psychology - Wiley Online Library  "},{"id":22,"href":"/keido/notes/20211231200630/","title":"📁Emacs","parent":"Keido","content":" 📝Emacs 📝Org-mode 📝Org-roam 📝ox-hugo  参照     ⚡My Emacs Config - 霹靂一閃  "},{"id":23,"href":"/keido/notes/20211231162342/","title":"📁勉強記録","parent":"Keido","content":"Articles     💻講義の動画を倍速で視聴しても内容はちゃんと頭に入るのか？問題 - パレオな男(2022) 💻How I note - AlexeyShmalko(2020) 💻GTDを噛み砕く - 吉良野すた(2020)  Books     📚実践Common Lisp - Peter Seibel(2008) 📚Land of Lisp - Conrad Barski(2013) 📚ブチ抜く力 - 与沢翼(2019) 📝ストレスフリーの仕事術 - デビッド・アレン(2006) 📝ひとつ上のGTD ストレスフリーの整理術 実践編 - デビッド・アレン(2010)  Talks     🎤【ショート動画時代】YouTubeShorts vs TikTok vs Reels…メディアの次の覇権を担うのは一体どれだ？ - 中田敦彦(2022-01-01) 🎤【Z世代】世界を激変させるニュージェネレーション！Z世代の価値観を徹底解説 - 中田敦彦(2021-12-11)  MOOCs     💻Learning How to Learn: Powerful mental tools to help you master tough subjects(coursera)  Papers    "},{"id":24,"href":"/keido/notes/20220112095806/","title":"📂Emacs","parent":"Keido","content":" 📝Emacs 📝Org-mode 📝Org-roam 📝ox-hugo  ref: ⚡My Emacs Config - 霹靂一閃\n"},{"id":25,"href":"/keido/notes/20211113235959/","title":"📚Land of Lisp - Conrad Barski(2013)","parent":"Keido","content":" title: Land of Lisp author: Conrad Barski date: 2013 tags  📝Common Lisp    書籍情報(External Links)     http://landoflisp.com/ - public site https://www.youtube.com/watch?v=HM1Zb3xmvMc - music video Land of Lisp | M.D. ConradBarski, Barski,Conrad, 史朗, 川合 |本 | 通販 | Amazon - amazon  "},{"id":26,"href":"/keido/notes/20220101141021/","title":"📚ひとつ上のGTD ストレスフリーの整理術 実践編 - デビッド・アレン(2010)","parent":"Keido","content":" title: ひとつ上のGTD ストレスフリーの整理術 実践編――仕事というゲームと人生というビジネスに勝利する方法 authors: David Allen date: 2010 tags  📝GTD   notes  読み直してみると，心についての言及がとても多いことに気づいた. タスクという言葉をすべて気になること，もっといえばwonderに置き換えてしまうとこの本が新鮮に見える. つまりGTDで扱うのはタスクでなく気になることであり，マインドワンダリングを処理してマインドフルネスにいたるための一つの解なのだ. ACT(Acceptance \u0026amp; Commitmemt Therapy) と似ている部分もある.    highlights    p11: GTDの理論はストレスを把握して軽減するための実践的なアプローチ    p18: 変化する不安な時代において，自分の下した判断に信頼をおく方法を提示した.    p28: 優先順位はコロコロ変わる. そして押しつぶされそうになる.    p29: GTDはストレスの管理を行う    既存の自己管理手法は時間管理や情報管理を行う. しかし問題は意味のわからないものが大量に押し寄せることだ. GTDはそこから生じるストレスの管理を扱う.\np43: GTDのキーワードは水のような心(Mind Like Water).    意識をいかに柔軟かつムダなく操作するかが生産性向上に必要.\np54: GTDはあなたの心を拡張する.    心を拡張して気になることの居場所をつくる.\np68: 仕事とプライベートを区別するという発想は間違い.    心は仕事とプライベートの区別をしてない. ポイントは集中力を削ぎ落とすあらゆる要因をなくすことであり，そこには仕事もプライベートもない.\np86. あなたの注意を妨げるということにおいては，すべてが同じように平等で重要.\np69: 自己管理の2つのキーワードは状況のコントロールと将来への見通し    p91: 気になることをすべて書き出すこと，これを心のお掃除と呼んでいる.    p234: トップダウンよりもボトムアップ    日常のこまごましたことが安定しない限り，より高次元のことに向きあっていくことができない.\np251. わたしが考えるのは週に1度だけ    p258. 注意を向けるべき分野を管理するのはチェックリストがいい    "},{"id":27,"href":"/keido/notes/20220102124443/","title":"📚ストレスフリーの仕事術 - デビッド・アレン(2006)","parent":"Keido","content":" authors: David Allen date: 2006 title: ストレスフリーの仕事術 - 仕事と人生をコントロールする52の法則 tags  📝GTD    highlights     p20.  あなたの能力は，あなたがリラックスできる能力に比例する.   p31.  いいアイデアに限って，それを実行しているときでないときに現れる. リラックスしているときなど. なのでそれをメモするためにいつでもメモをとれる準備をしておく必要がある.   p68.  考えるべきことについてすぐに考えないということが大事なのだ. 週に1回レビューの時間を確保してそのときに考える. するとその他の時間では考えないという贅沢が味わえる.   p107.  わたしが教えているのは，いかにして生活から不必要なストレスを取り除くか，ということ.   p111.  どんなときでも，たった一つの目の前のことに完全に集中することが，成果を上げる秘訣.    "},{"id":28,"href":"/keido/notes/20220107143739/","title":"📚ブチ抜く力 - 与沢翼(2019)","parent":"Keido","content":" title: ブチ抜く力 authors: 与沢翼 date: 2019-03-02 publisher: 扶桑社 url: http://www.amazon.co.jp/dp/B07PBVBB4Q  "},{"id":29,"href":"/keido/notes/20220110030705/","title":"📚実践Common Lisp - Peter Seibel(2008)","parent":"Keido","content":" title: 実践Common Lisp authors: Peter Seibel date: 2008-07-26 publisher: オーム社 url: http://www.amazon.co.jp/dp/978-4-274-06721-1 notes:  2016年にAmazonで購入したがメルカリで売却. また読みたくなったので2022にAmazonで中古購入.  販売停止なので今後は入手困難か? 英語ならばオンラインで読めるので最悪それで.      "},{"id":30,"href":"/keido/notes/20211229061513/","title":"📝adb","parent":"Keido","content":"adb（Android Debug Bridge）はAndroid端末をデバッグする為のツール.1 Android SDK Platform-Toolsのひとつなので，インストールはSDK Platform-Toolsをインストールする.2\nPCとAndroid端末をTCP通信で接続することでPCから様々な設定や操作が可能になる.USB経由で接続する方法とWiki経由で接続する方法がある.\nadbをAndroidで利用するには，開発者向けオプションが有効になっている必要がある.3 またAndroid v10以前ではUSB経由でadbに乗り込んでportを開ける手順が必要(adb tcpip 5555).v11以上ならAndroidからの設定だけでよい.\nExternal Links      Android Debug Bridge（adb） - Android Developers公式(ja)の説明.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n https://developer.android.com/studio/releases/platform-tools?hl=ja\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n https://developer.android.com/studio/command-line/adb?hl=ja#Enabling\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "},{"id":31,"href":"/keido/notes/20211211065629/","title":"📝Common Lisp","parent":"Keido","content":"tag: 📝Lisp\nCommon Lispの特徴    Common Lispの文法    参考情報     Common Lisp - Wikipedia  参照     📚Land of Lisp - Conrad Barski(2013) 📚実践Common Lisp - Peter Seibel(2008) 💻A Road to Common Lisp / Steve Losh  "},{"id":32,"href":"/keido/notes/20211228180209/","title":"📝Emacs","parent":"Keido","content":"readonly repositories\n https://emba.gnu.org/emacs/emacs https://github.com/emacs-mirror/emacs/commits/master  Emacs Tips    tip: Linux上で動作するEmacsで親指シフトの最適解(2022)    ref: 🖊Linux上で動作するEmacsで親指シフト入力をする最適解(2022)\nnote:\n ブログへ文章を移動した. \u0026lt;2022-01-12 水\u0026gt; こういう流動的なものはwikiに置かないほうがいいかも.  howto: fcitxでEmacs GUIの日本語入力ができないときの対処方法    環境変数でLC_CTYPE=zh_CN.UTF-8を設定して起動する.\nlink: https://fcitx-im.org/wiki/Input%5Fmethod%5Frelated%5Fenvironment%5Fvariables\n#!/bin/bash LC_CTYPE=zh_CN.UTF-8 emacs  日本語情報がなくて苦戦したが中国語でも同じ課題があるだろうという観点で検索したら解決方法か見つかったので載せておく.\n howto: init.elをOrg Fileから生成するには?    see\n Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する | A perfect autumn day  init.elをOrg Fileから生成してそうなサイト     https://takaxp.github.io/init.html https://www.grugrut.net/posts/my-emacs-init-el/ https://mugijiru.github.io/.emacs.d/basics/custom-file/  example: Doom Emacs実装    わたしの場合，Doom Emacsをつかっている(2022現在)ので，init.elではなくconfig.elに設定を追加.\n(require \u0026#39;org-install) (org-babel-load-file \u0026#34;~/.doom.d/hekireki.org\u0026#34;) 参照    現在のわたしの設定: ⚡My Emacs Config - 霹靂一閃\n以前，babel-loaderをつかってOrg fileを細かく分割して管理していたが，カオスになったのでゴミ箱に捨てました.\n 🖊babel-loader:org-mode で init.el を管理する方法 | Futurismo https://github.com/tsu-nera/dotfiles/tree/master/.emacs.d  tip: Emacsでマスウスクロールが微妙になめらかに    Emacs29で入ったモード. 微妙にマウススクロールがなめらかになったが気のせいかも. 言われないと気づかないレベル.\n(pixel-scroll-precision-mode) "},{"id":33,"href":"/keido/notes/20220103071935/","title":"📝GTD","parent":"Keido","content":"Getting Things Done.\n"},{"id":34,"href":"/keido/notes/20211211065603/","title":"📝Lisp","parent":"Keido","content":"List of Lisp Languages     📝Common Lisp  Lispの特徴    Lispは力であるまとめ    Lispは力である. いろいろなところで言われているこの抽象的な表現をまとめてみる.\n"},{"id":35,"href":"/keido/notes/20211211071525/","title":"📝Org-mode","parent":"Keido","content":"Org-capture    howto: Google Chomeの閲覧内容をorg-captureするには?    org-protocol と Chrome ExtentionのOrg Capture を利用する.\n仕組みとしては，Chromeにインストールした拡張機能がorg-protocolというMIME type(アプリケーションを識別する体系)を発行するので，それをemacsclientで受け取って処理をする.\n具体的にはemacslicentのデスクトップアプリケーションを作成して，org-protocolを処理するデフォルトアプリケーションでそのアプリケーションを指定.\nManjaro Linuxの例(xfce)    ~/.local/share/applications/emacsclient.desktop作成\n[Desktop Entry] Name=Emacsclient Exec=emacsclient %u Icon=emacs Type=Application Terminal=false MimeType=x-scheme-handler/org-protocol ~/.config/mimeapps.listに x-scheme-handler/org-protocol=emacsclient.desktop を追記.\nupdate-desktop-databbaseをコマンドラインから実行.\norg-captureの設定例.\n(\u0026#34;p\u0026#34; \u0026#34;browser\u0026#34; entry (file \u0026#34;~/gtd/inbox/inbox.org\u0026#34;) \u0026#34;* %^{Title}\\nSource: %u, %c\\n #+BEGIN_QUOTE\\n%:initial\\n#+END_QUOTE\\n\\n\\n%?\u0026#34;) (\u0026#34;L\u0026#34; \u0026#34;browser link\u0026#34; entry (file \u0026#34;~/gtd/inbox/inbox.org\u0026#34;) \u0026#34;* %? [[%:link][%:description]] \\nCaptured On: %U\u0026#34;) ポイントはorg-captureのトリガキーをpとLにすること.これはorg-capture-extensionなのでこれを守らないと動かない.もしくは自分でブックマークレットを作成する.\nlearn more\n Org-Protocol XDG MIME Applications - ArchWiki https://github.com/sprig/org-capture-extension  "},{"id":36,"href":"/keido/notes/20211204183600/","title":"📝Org-roam","parent":"Keido","content":"EmacsでZettelkasten Methodを実現するためのOrg-mode実装.\nOrg-roam まとめ    Org-roamを解説した有料記事      An Orgmode Note Workflow - Rohit Goswami\nOrg-roam-bibtexやOrg-noterと連携した文献管理方法を解説.\n  How I note\nOrg-roamでZettelkastenを実現するための方法を解説.\nref: How I note\n  Org-roamから生成したサイトまとめ    a.k.a. Digital Garden.\n https://commonplace.doubleloop.net/  How I publish my org-roam wiki with org-publish - doubleloop   https://braindump.jethro.dev/ https://braindump.badykov.com/about/  My Braindump - Kraken of Thought https://github.com/ayrat555/braindump   https://www.alexeyshmalko.com/ https://notes.alexkehayias.com/ https://hugocisneros.com/notes/  My Org-roam Notes Workflow - Hugo Cisneros   https://seds.nl/notes/ https://github.com/bphenriques/knowledge-base https://wiki.nikitavoloboev.xyz/  Org-roam Tips    Org-roamのノートをサイトに公開するには?    org-publishかox-hugoを利用するのが一般的.\n org-publish を用いてOrgファイルをHTMLに変換して公開. 📝ox-hugo を用いてHugo用のMarkdownに変換してHugoで公開.  将来的にはorg-roamやorg-roam-uiでpublishの機能がサポートされる可能性あり(2022).\nExternal Links     Publishing Org-mode files to HTML Org-roam User Manual Build Your Website with Org Mode - System Crafters Publishing org-roam-ui · Discussion #109 · org-roam/org-roam-ui · GitHub  参照     📝Emacs 📝Zettelkasten Method  "},{"id":37,"href":"/keido/notes/20211231044406/","title":"📝ox-hugo","parent":"Keido","content":"Org-modeからHugoに適したMarkdownとfrontmatterを出力するためのEmacs Package.\nox-hugo Tips    howot: exportをスキップする方法    ref: https://ox-hugo.scripter.co/doc/tags-and-categories/#marking-files-to-not-be-exported\n file baseでは，#+hugo_tags に noexport subtree baseでは，#+filetags に noexport  howto: ox-hugoで画像を記事に埋め込むには?    ox-hugoは/staticをrootにして画像を探すので，パスは/staticからの相対パスで書く.\nox-hugoはOrg fileに添付された画像をExportするときに自動でMarkdownファイルと同じディレクトリに配置してくれる.これは管理上とても楽である.\n参考: Images in Content — ox-hugo - Org to Hugo exporter\n"},{"id":38,"href":"/keido/notes/20220107141801/","title":"📝Youtube","parent":"Keido","content":"動画サービス.\nYoutube Tips    YoutubeのプレイリストのRSSを取得するには?    プレイリストのページを開いてplaylist_idを取得して以下のURLで設定.\nhttps://www.youtube.com/feeds/videos.xml?playlist%5Fid=%7Bplaylist%5Fid}\n"},{"id":39,"href":"/keido/notes/20211206071458/","title":"📝Zettelkasten Method","parent":"Keido","content":"Zettelkasten Methodとは    Niklas Luhmannの考案した, 思考をするための方法論，フレームワーク.\nZettelkastenという単語はZettelkastenのフレームワークを指す場合とZettlekastenで管理するPermanent Noteを入れる箱(Slipbox)を指す場合の2つがある.これらは書き手や文脈で統一されてないので情報を得るときは注意が必要.\nZK method, Zettelと省略されることもある.\nZettelkasten Methodまとめ    Zettelkasten Methodでは以下の4種類のノートの概念がある.\n Fleeting Notes Literature Notes Parmanent Notes Reference Notes  📝Fleeting Notes    思いついた思考を書き留めたもの.何でもOK, 思いついたら何でも書く.\n道具は紙でも電子でもなんでもよいが，トピックごとだとあとで整理しやすい.\nメインのシステムにNoteを移動したら捨てる,もしくは移動せずにそのまま捨てる.\nDaily Notesについて    Zettelkasten Methodの文脈での時系列のFleeting NotesとしてDaily Notes(DNP)という単語がある.\nとはいえ，Niklus LuhmanやZonke Ahrensの著作ではこの概念は登場しない.\nRoam ResearchやObsidianなどのZettelkastenのソフトウェア実装の文脈でよく登場する.\n📝Literature Notes    日本語訳では，文献メモとも言われる.Lit Notes, lit notesと略されることもある.\nインプットするたび書く.読んだ本，みたYoutube動画，受けた講座などなど.\n 覚えておきたいこと. 自分の思考. アウトプットに使いたいもの.  自分の言葉でリライトしながら書く. 著者の思想を自分の思想に翻訳する意味が有る.自分が理解していないものに対しては自分で書くことができない.\nカードの裏には書誌情報を書く.\n タイトル 発行年 著者 出版社 引用ページ\u0026hellip;  📝Permanent Notes    Concept(=概念)が書かれたノート.\n番号を振り，他のノートへの関連を番号でリンクさせて, Zettelkasten(a.k.a.Slipbox)のシステムに入れて管理する.\nメモには問い(仮説)が伴う. 問いこそが重要.すなわち，問い，仮説，アイデア.\n内容は自分自身の思想であり，他者の思想とは明確に区別する(他者の思想は入れない).\nPermanent Noteとはブログの見出しのようなもの    つまりNoteをアウトライナーで並べればそれがそのままブログ記事として完成する.\n最終的なアウトプットのためにはアウトライナーで階層的にロジックツリーで管理しうるもの.\nこの Obsidianを利用したZettelkastenの解説動画 でブログ執筆のWorkflowをみて開眼した.みだしの下にPermanet Noteへのリンクを埋め込んでその内容を右ペインに展開すれば，もうすなわちブログ記事がほぼ完成していて，あとはそれを清書するればいい.\nEvergreen NoteとPermanent Noteの関係    Evergreen NoteとはAndy Matuschakが提唱した概念であるが，Zettelkastenから影響を受けているのでほぼ同義. 彼のノートはWebで公開されている(example of Evergreen notes).\nしばしばPermanent NoteはConcept Noteと表現される.Permanent Noteが単一のコンセプトを表現するものならば，この名前はわかりやすい.\nPermanent NotesとReference Noteの関係    Permanent Notesとは，Permanent Noteの集合.Permanent Noteそれぞれは独立しているが, Permanent Noteの性質を扱いたい場合はPermanent Notesという言葉を使う.またReference NoteはPermanent Noteをキーワードと番号で対にして列挙したもの. 文脈によってPermanent NotesがPermanent Noteの性質を述べるものなのかReference Noteを指すのかは注意.\n📝Reference Notes    キーワードとそれに対するメモへのリンクから構成される.\n日本語では索引メモと訳される.\nZettelKastenシステムに入れるがあくまで索引メモはサブのメモ.\nReference NotesとTOC, Structure Notes, MOCの関係    いわゆる目次，TOC(Table of Contents)とはRefenence Notesとは似ている.また，Structure Notesとも表現される.どちらも，構造化したノートという点では広義のReference Notesとなる.\nよくObsidian界隈やLYT(Linking Your Thinking)の中で現れるNick Miroさんの Maps of Conents(MOC) はRefernece Noteも近い.Reference Notesに影響を受けているので.\nただ，そこで列挙するものがトピックならばそれはReference Noteではない.Refenrece Notesで列挙するものはConceptsであり，一般的には文で表現される.\nLuhmanの方法だと，キーワードとそれに対応する番号を列挙したリストがReference Noteとなる.エントリとなるReference Noteにはキーワードに紐づくリンクはせいぜい1つか2つ.メモ同士の繋がりが驚きを生みこれが重要であるから.索引からメモへジャンプしても驚きはない.1つか2つのメモへのエントリポイントであればいい, という考え方.そしてエントリから飛んだ索引メモには，さらに最大25個のPermanent Notesが列挙されていて，それらは英数字で管理された.たとえば，1.a, 1.b, 2.c..など. o Table of Contentsだと，いわゆる本の目次のようにひとつのノートからすべての階層が一覧できる.これはluhmanの方法とは違う.\nPKMとZettelkasten Systemの関係    よくPKM(Personal Knowledge Management)の用語もでてくる.PKMとは個人の情報管理システム.\nこの言葉自体は古くからあるが，最近のRoamブームで再びよく登場するようになっている.\nここでの問題点は，文脈によってこれが他者の知識をまとめたWikiと自分の言葉や思考をまとめたPKMで混同されてつかわれているところ.そして，それらをZettelkasten Methodを参考にしていると表現されているところ.\n参照     📝Org-roam 🖊日本語のツェッテルカステン解説本(TAKE NOTES!)を読んで考えたこと  参考文献     wikipedia: https://en.wikipedia.org/wiki/Zettelkasten  "},{"id":40,"href":"/keido/notes/20211229203145/","title":"📝Zotero","parent":"Keido","content":"Zotero(ゾテロ)とは，論文管理を目的にしたオープンソースの文献管理ソフトウェア.\nhttps://www.zotero.org/\nZoteroまとめ    Zoteroは勉強したインプットのメタ情報の取得とアーカイブが可能    論文管理が目的とはいえ，論文でなくてもいろいろ管理することが可能.1\n Web記事  Amazon(書誌情報) Youtube   PDF etc\u0026hellip;  たとえば，AmazonやYoutubeをZoteroに送信するとメタ情報がZotero画面に表示される. PDFで購入した電子書籍に対してAmazonのページからメタ情報を取得してPDFをその情報に添付することでPDFとメタ情報を管理できる.\nさらに，Web記事はスクリーンショットという機能でhtmlとしてローカルに保存することも可能.\nZoteroは個人用のローカルはてなブックマーク，メモも管理できる    annotationという形でその文献に対するメモを管理することが可能. いわば，はてなブックマークを詳細情報を含めてローカルで個人管理するようなもの.\n参考文献     quick start guide : Zotero公式のクイックスタートガイド(ja) 【令和最新版】文献管理ソフト Zoteroのすゝめ｜SD｜note : 日本語の良記事  注釈      わたしの目的は文献一般を管理すること.論文はなかなか縁がない.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "},{"id":41,"href":"/keido/notes/20211217134744/","title":"📝Z世代","parent":"Keido","content":"1996-2012に生まれた世代.\nGeneratin Z, GenZともいう.\n"},{"id":42,"href":"/keido/notes/20220110081806/","title":"📝勉強法","parent":"Keido","content":"参照     💻Learning How to Learn - Barbara Oakley(coursera)  "},{"id":43,"href":"/keido/notes/20220107073312/","title":"🗒知的生産基盤の運用ルールまとめ","parent":"Keido","content":"ノート種別     Source Note  Book Talk Online Paper   Journal Note Knowledge Note Issue Note Test Note Concept Note Output Note  ノート種別と絵文字の対応     📚Book Note - Books 📝Wiki Note - Memo 📂TOC Note(for wiki) - Open File Folder 🎓Concept Note - Graduation Cap 🏛MOC Note(for concept) - Classical Buildling 🗒Doc Note - Spiral Note Pad 🖊Output Note - Lower Left Ballpoint pen 💡Issue Note - Electric Light Bulb 🔨Project Note - Hammer 🏆Goal Note - Trophy 🦊DardFox Note - Fox Face  "}]